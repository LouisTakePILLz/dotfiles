# Change window state
hyper + t ; {s,f,t,y}
  bspc node -t '~{pseudo_tiled,fullscreen,tiled,floating}'

# Toggle sticky
# FIXME: bspwm doesn't put the tree back in its origin state when moving a
# sticky node between two desktops
hyper + t ; h
  bspc node -g sticky

# Toggle fullscreen
hyper + f
  bspc node -t '~fullscreen'

# Toggle monocle
hyper + a
  bspc desktop -l next

# Navigate windows with arrows
{hyper,super} + {_,shift +} {Left,Down,Up,Right}
  {_,_}bspc node -{f,s} {west,south,north,east}

# Flip desktop
hyper + z ; {h,v}
  bspc node @/ -F {horizontal,vertical}

# Rotate desktop
hyper + {_,shift +} e
  bspc node @/ -R {_,-}90

# Rotate windows
hyper + {_,shift +} r
  bspc node "$(bspc query -N -n @parent)" -R {_,-}90

# Change desktop on main monitor
hyper + {1,2,3,4,5,6,7,8,9}
  cur="$(bspc query --names -D -d)"; \
  ((cur < 10)) \
    && flag="-f" \
    || flag="-a"; \
  bspc desktop $flag {0,1,2,3,4,5,6,7,8}

# Change desktop on left monitor
hyper + F{1,2,3,4,5,6,7,8,9}
  cur="$(bspc query --names -D -d)"; \
  ((cur >= 10)) \
    && flag="-f" \
    || flag="-a"; \
  bspc desktop $flag {10,11,12,13,14,15,16,17,18}

# Switch desktop on current monitor
hyper + d : {1,2,3,4,5,6,7,8,9}
  cur="$(bspc query --names -D -d)"; \
  bspc desktop -f $(( (cur >= 10 ? 10 : 0) + {0,1,2,3,4,5,6,7,8} ))

# Move window to desktop
hyper + shift + {_,F}{1,2,3,4,5,6,7,8,9}
  bspc node focused -d {_,1}{0,1,2,3,4,5,6,7,8} --follow

# Resize window
hyper + alt + {Left,Down,Up,Right} : {Left,Down,Up,Right}
  bspc node -z {left,bottom,top,right} {-10 0,0 10,0 -10,10 0}

# Close window
hyper + {_,shift +} BackSpace
  bspc node -{c,k}

# Lock session and pause all VLC players
super + shift + l
  arr=($(dbus-send --session --dest=org.freedesktop.DBus --type=method_call --print-reply=literal /org/freedesktop/DBus org.freedesktop.DBus.ListNames)); \
  for i in "$\{arr[@]\}"; do \
    [[ "$i" == "org.mpris.MediaPlayer2.vlc"* ]] \
      && dbus-send --type=method_call --dest="$i" /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Pause; \
  done; \
  dm-tool lock

# Exit session
super + alt + BackSpace
  bspc quit

# Run desktop programs and commands
hyper + {_,shift +} space
  rofi -monitor "$(bspc query -M -m --names)" -theme ~/.config/rofi/themes/onedark.rasi \
    {-modi drun -show drun,-modi run -show run}

# Cycle through windows
alt + Tab
  rofi -monitor "$(bspc query -M -m --names)" -show-icons -theme ~/.config/rofi/themes/onedark.rasi \
    -kb-row-tab 'Alt+Tab,Tab' \
    -modi window,windowcd -show windowcd

# TODO: Cycle through chrome tabs
#super + Tab

# Mark window
hyper + c
  bspc node -g marked=on

# Clear marked windows
hyper + Escape
  bspc node any.marked -g marked=off

# Move marked windows
hyper + v
  while w="$(bspc query -N -n any.marked)"; do \
    bspc node "$w".marked -d focused -n focused; \
    bspc node "$w".marked -g marked=off; \
  done

# Swap marked window
hyper + x
  bspc node any.marked -s focused; \
  bspc node any.marked -g marked=off

# TODO: volume controls
#XF86AudioLowerVolume
#XF86AudioRaiseVolume

# Play/pause through MPRIS
XF86Audio{Stop,Prev,Play,Next}
  playerctl -i vlc {stop,previous,play-pause,next}

# Open terminal
hyper + Return
  $TERMINAL

# Open browser
hyper + {_,shift +} n
  eval {$BROWSER,$BROWSER_INCOGNITO}

# Change gap
hyper + {minus,equal}
  gap="$(bspc config -d focused window_gap)"; \
  bspc config -d focused window_gap $(({gap + 2, gap > 0 ? gap - 2 : 0}))

# Reset gap
hyper + 0
  bspc config -d focused window_gap $BSPWM_GAP

# Cycle through monitors
hyper + g
  bspc monitor -f next

# Send window to next monitor
hyper + shift + g
  bspc node -m next --follow

# Swap with biggest window on current monitor
hyper + w
  bspc node -s biggest.local

# Mute microphone
hyper + m
  ~/scripts-and-files/audio/toggle_mic.sh

# Screenshot of current desktop
shift + Print
  current_mon="$(bspc query --monitors --monitor focused --names)"; \
  while IFS=' ' read -r mon width height x y; do \
    [[ "$current_mon" == "$mon" ]] || continue; \
    import -window root -crop "$\{width\}x$\{height\}+$\{x\}+$\{y\}" png:- \
      | xclip -selection clipboard -t image/png; \
  done < <( \
    xrandr -q | grep '\bconnected\b' \
      | sed -r 's/^([^ ]*).*? ([0-9]+)x([0-9]+)\+([0-9]+)\+([0-9]+).*$/\1 \2 \3 \4 \5/' \
  );

# Screenshot of current window
alt + Print
  id="$(bspc query -N -n)"; \
  border="$(bspc config -n focused border_width)"; \
  while IFS=: read -r field value; do \
    value="$(echo -n "$value" | awk '\{$1=$1;print\}')"; \
    case "$field" in \
      *'Absolute upper-left X') x="$value" ;; \
      *'Absolute upper-left Y') y="$value" ;; \
      *'Width') width="$value" ;; \
      *'Height') height="$value" ;; \
    esac; \
  done < <(xwininfo -id "$id"); \
  import -window root -crop "$\{width\}x$\{height\}+$((x + border))+$((y + border))" png:- \
    | xclip -selection clipboard -t image/png

# Screenshot selection
Print
  tmp="$(mktemp)"; \
  spectacle -r -n -b -o "$tmp"; \
  xclip -selection clipboard -t image/png -i "$tmp"; \
  rm "$tmp"

# Screenshot of all monitors
ctrl + shift + Print
  import -window root png:- \
    | xclip -selection clipboard -t image/png
